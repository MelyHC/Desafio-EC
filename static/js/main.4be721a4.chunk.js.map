{"version":3,"sources":["components/Header.js","components/CardSuscription.js","views/Suscription.js","views/CreditCard.js","views/Confirmation.js","App.js","serviceWorker.js","index.js"],"names":["Header","CardSuscription","plan","price","description","pack","className","map","num","key","to","Suscription","changeTypePlan","onChange","id","value","type","name","htmlFor","defaultChecked","CreditCard","Confirmation","typePlan","descrption","App","state","user","currentPlan","otherPlan","dataAllPlan","changePlan","e","target","toLowerCase","setState","clickSuscriber","dataPlan","packPlan","dataPackPlan","this","allData","objPlan","forEach","numPlan","i","descriptionPlan","parseInt","path","exac","render","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4be721a4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ }) => {\r\n  return (\r\n    <header>\r\n      <h1>Mag.</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CardSuscription = ({ plan: { price, description, pack } }) => {\r\n  return (\r\n    <div className=\"card col-10\">\r\n      <div>\r\n        <h1>S/ {price} / AL MES</h1>\r\n        <p className=\"m-0\">{description}</p>\r\n      </div>\r\n      {\r\n        pack ?\r\n          pack.map(({ num, description }) =>\r\n            <p key={num} className=\"mb-0 mx-3\">\r\n              <i className=\"fas fa-check\" />\r\n              {description}</p>\r\n          )\r\n          : <p>Esperando lista ...</p>\r\n      }\r\n      <Link to=\"/datos\" className=\"btn btn-primary\" >Suscribirme</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardSuscription;","import React, { Fragment } from 'react';\r\nimport Header from '../components/Header';\r\nimport CardSuscription from '../components/CardSuscription';\r\n\r\nconst Suscription = ({ changeTypePlan, plan }) => {\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <form onChange={changeTypePlan} className=\"row m-0 justify-content-center align-aitem-center\">\r\n        <div className=\"switch switch--horizontal\">\r\n          <input id=\"radio-a\" value=\"Estándar\" type=\"radio\" name=\"first-switch\" />\r\n          <label htmlFor=\"radio-a\">Plan Estándar</label>\r\n          <input id=\"radio-b\" value=\"Premium\" type=\"radio\" name=\"first-switch\" defaultChecked />\r\n          <label htmlFor=\"radio-b\">Plan Premium</label><span className=\"toggle-outside\"><span className=\"toggle-inside\"></span></span>\r\n        </div>\r\n        <CardSuscription plan={plan}/>\r\n      </form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Suscription;","import React, { Fragment } from 'react';\r\n\r\nconst CreditCard = ({ price}) => {\r\n  return (\r\n    <Fragment>\r\n      <header className=\"bg-dark text-white\">\r\n        <h4>Tus datos</h4>\r\n      </header>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label>Nombre y Apellidos</label>\r\n          <input className=\"form-control\" />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Número de tarjeta</label>\r\n          <input className=\"form-control\" />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>F. Expira</label>\r\n          <input type=\"date\" className=\"form-control\" />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>CVC</label>\r\n          <input type=\"password\" className=\"form-control\" />\r\n        </div>\r\n        <button type=\"submit\">Pagar S/ {price}</button>\r\n      </form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default CreditCard;","import React, { Fragment } from 'react';\r\nimport Header from '../components/Header';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Confirmation = ({ name, typePlan, price, descrption }) => {\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <img />\r\n      <h6>Bienvenio {name} has adquirido el</h6>\r\n      <h4>Plan {typePlan}</h4>\r\n      <h5>S/{price} al mes</h5>\r\n      <p>{descrption}</p>\r\n      <Link>Ir a ver mi plan</Link>\r\n      <footer>\r\n        <a>Ir a Mag.pe</a>\r\n      </footer>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Confirmation;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Suscription from './views/Suscription';\nimport CreditCard from './views/CreditCard';\nimport Confirmation from './views/Confirmation';\n\nimport dataPlan from './data/plan.json';\nimport dataPackPlan from './data/packPlan.json';\n\nclass App extends Component {\n  state = {\n    user: {},\n    currentPlan: {\n      name: 'Premium'\n    },\n    otherPlan: {},\n    dataAllPlan: []\n  }\n\n  componentDidMount() {\n    const plan = dataPlan;\n    const packPlan = dataPackPlan;\n    let { currentPlan, otherPlan } = this.state;\n\n    const allData = plan.map(objPlan => {\n\n      if (currentPlan.name.toLowerCase() === objPlan.type.toLowerCase()) {\n\n        currentPlan = objPlan;\n\n      } else {\n\n        otherPlan = objPlan;\n      }\n\n      objPlan.pack.forEach((numPlan, i) => {\n\n        packPlan.forEach(descriptionPlan => {\n\n          if (parseInt(numPlan) === parseInt(descriptionPlan.num)) {\n            // numPlan = descriptionPlan;\n            objPlan.pack[i] = descriptionPlan;\n          }\n        })\n      });\n\n      return objPlan;\n    })\n\n    this.setState({ dataAllPlan: allData, currentPlan, otherPlan });\n  }\n\n  changePlan = (e) => {\n\n    const { currentPlan, otherPlan } = this.state;\n\n    if (e.target.value.toLowerCase() !== currentPlan.type.toLowerCase()) {\n\n      this.setState({ currentPlan: otherPlan, otherPlan: currentPlan })\n    }\n  }\n\n  clickSuscriber =(e)=>{}\n\n  render() {\n    const {currentPlan, otherPlan} = this.state;\n    return (\n      <Router>\n        <Switch>\n          {/* <Route path='/' exac render={} /> */}\n          <Route path='/' exac render={() => <Suscription changeTypePlan={this.changePlan} plan={currentPlan} />} />\n          <Route path='/datos' exac render={CreditCard} />\n          <Route path='/confirmacion' exac render={Confirmation} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}